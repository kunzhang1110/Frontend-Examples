{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Object"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "//Function Object constructed by Function constructor\r\nvar add = new Function(\"a\", \"b\", \"return a + b;\");\r\nconsole.log(add(1, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "3",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Getters and Setters"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const stock ={\r\n    _short:\"\",\r\n    get ticker(){\r\n        return this._short;\r\n    },\r\n    set ticker(str){\r\n        this._short = str;\r\n    }\r\n}\r\nstock.ticker=\"BHP\"\r\nconsole.log(stock.ticker)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "BHP",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Object.Assign(target, ...source)"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const target = { a: 1, b: 2 };\r\nconst source = { b: 4, c: 5 };\r\n\r\nconst returnedTarget = Object.assign(target, source);\r\n\r\nconsole.log(target); //Object { a: 1, b: 4, c: 5 }\r\n\r\nconsole.log(returnedTarget);//Object { a: 1, b: 4, c: 5 }"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ a: 1, b: 4, c: 5 }",
                                "{ a: 1, b: 4, c: 5 }",
                                "[Object: null prototype] {}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Call, Apply, Bind"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var user = { name: \"Amy\" };\r\n\r\nfunction printGreetings(greeting1, greeting2) {\r\n  console.log(greeting1 + \" \" + this.name + \" \" + greeting2);\r\n}\r\n\r\nprintGreetings.call(user, \"Hello\", \"How are you?\");\r\nprintGreetings.apply(user, [\"Hello\", \"How are you?\"]);\r\nvar printGreetingUser1 = printGreetings.bind(user);\r\nprintGreetingUser1(\"Hello\", \"How are you?\");\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Hello Amy How are you?",
                                "Hello Amy How are you?",
                                "Hello Amy How are you?",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Object.defineProperties()"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "Object.defineProperty(obj, \"property1\", {\r\n  value: 50,\r\n  writable: true,\r\n  enumerable: true,\r\n  configurable: true, // This is allowed because 'configurable' is true\r\n});\r\n\r\nconsole.log(obj.property1); // Output: 50\r\n\r\n// Attempt to delete the property\r\ndelete obj.property1; // Allowed because 'configurable' is true\r\n\r\nconsole.log(obj.property1); // Output: undefined\r\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const obj = {\r\n  a: 1,\r\n};\r\nObject.defineProperty(obj, \"b\", {\r\n  get() {\r\n    return [1, 2, 3];\r\n  },\r\n  enumerable: false,\r\n});\r\n\r\nconsole.log({ ...obj }); //{a: 1}\r\nconsole.log(Object.keys(obj)); //[ 'a' ]\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ a: 1 }",
                                "[ 'a' ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}