{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Array"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Array Slice and Splice"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let arr = [1, 2, 3, 4, 5];\r\nlet arr1 = arr.slice(0, 2); // returns [1,2]\r\nlet arr2 = arr.slice(2, 3); // returns [3]\r\n\r\nlet arrOriginal1 = [1, 2, 3, 4, 5];\r\nlet arrOriginal2 = [1, 2, 3, 4, 5];\r\nlet arrOriginal3 = [1, 2, 3, 4, 5];\r\n\r\nlet arrayReturned1 = arrOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]\r\nlet arrayReturned2 = arrOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]\r\nlet arrayReturned3 = arrOriginal3.splice(3, 1, \"a\", \"b\", \"c\"); //returns [4]; original array: [1, 2, 3, \"a\", \"b\", \"c\", 5]"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Delete Operator"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var user = { name: \"Amy\", age: 20 };\r\ndelete user.age; //{ name: 'Amy' }\r\nvar arr = [1, 2, 3];\r\ndelete arr[1]; //[ 1, undefined, 3 ]\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 1, <1 empty item>, 3 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## WeakMap"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let weakMap = new WeakMap();\r\n\r\n{\r\n  let keyObj = { key: 1 };\r\n  weakMap.set(keyObj, \"Amy\");\r\n  console.log(weakMap.get(keyObj)); //true\r\n}\r\n// 'obj' goes out of scope and is only weakly referenced and is eligible for garbage collection.\r\nconsole.log(weakMap.get(obj)); //undefined\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Amy",
                                "undefined",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Compare Scalar Array"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const arrayFirst = [1, 2, 3, 4, 5];\r\nconst arraySecond = [1, 2, 3, 4, 5];\r\nconsole.log(\r\n  arrayFirst.length === arraySecond.length &&\r\n    arrayFirst.every((value, index) => value === arraySecond[index])\r\n); // true\r\n"
            ],
            "outputs": []
        }
    ]
}